#####################################################################
########################## dev tool #################################
#####################################################################
# auto update and build using dev tool
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true
# tomcat server port assigned
server.port=8084
# local mysql properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/gongbang?serverTimezone=Asia/Seoul
spring.datasource.username=root
spring.datasource.password=1234
# Amazon AWS
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=
#spring.datasource.username=
#spring.datasource.password=
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
# logging.level.org.hibernate.type.descriptor.sql=trace
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# encoding
spring.http.encoding.charset=utf-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
# naming rule
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# file size
spring.servlet.multipart.max-file-size=128MB
spring.servlet.multipart.max-request-size=128MB
spring.servlet.multipart.enabled=true
#####################################################################
########################## kakao OAuth2.0 ###########################
#####################################################################
# put 'REST API key'
spring.security.oauth2.client.registration.kakao.client-id=98e94cfc65fd05dc3ea6844ba93716b5
# put 'client secret key'
spring.security.oauth2.client.registration.kakao.client-secret=QfR7axpEL0i9Z3FcxEPyYbqRXwnWLZQt
# agreement [id]
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, account_email
# client name
spring.security.oauth2.client.registration.kakao.client-name=kakao
# request token[only for kakao]
spring.security.oauth2.client.registration.kakao.client-authentication-method=post
# request token
spring.security.oauth2.client.registration.kakao.authorization-grant_type=authorization_code
# request url : redirect_uri (http://localhost:8084/login/oauth2/code/kakao)
spring.security.oauth2.client.registration.kakao.redirect_uri={baseUrl}/{action}/oauth2/code/{registrationId}
# request url : authorization uri
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# request url : token uri
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
# request uri : user-info who got token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
# request uri : target name [json type]
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account
#####################################################################
########################## naver OAuth2.0 ###########################
#####################################################################
# put 'REST API key'
spring.security.oauth2.client.registration.naver.client-id=O4erDgB0K8QZhAmGfhig
# put 'client secret key'
spring.security.oauth2.client.registration.naver.client-secret=wbOlU6KewJ
# agreement [id]
spring.security.oauth2.client.registration.naver.scope=name, email
# client name
spring.security.oauth2.client.registration.naver.client-name=naver
# request token
spring.security.oauth2.client.registration.naver.authorization-grant_type=authorization_code
# request url : redirect_uri (http://localhost:8084/login/oauth2/code/kakao)
spring.security.oauth2.client.registration.naver.redirect_uri={baseUrl}/{action}/oauth2/code/{registrationId}
# request url : authorization uri
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
# request url : token uri
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
# request uri : user-info who got token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
# request uri : target name [using response key value, we can get json type]
spring.security.oauth2.client.provider.naver.user-name-attribute=response
#####################################################################
########################## google OAuth2.0 ##########################
#####################################################################
# put 'REST API key'
spring.security.oauth2.client.registration.google.client-id=926163615687-fedrc5g8n7tledfaep2m3413fbvuicsg.apps.googleusercontent.com
# put 'client secret key'
spring.security.oauth2.client.registration.google.client-secret=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
# agreement [id]
spring.security.oauth2.client.registration.google.scope=email, profile
